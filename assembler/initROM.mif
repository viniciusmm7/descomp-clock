WIDTH=13;
DEPTH=512;
ADDRESS_RADIX=DEC;
DATA_RADIX=BIN;

CONTENT BEGIN
0	: 0000000000000;	-- 	 SETUP
1	: 0101111111111;	-- STA @511    	 reseta a leitura do key 0
2	: 0101111111110;	-- STA @510    	 reseta a leitura do key 1
3	: 0101111111101;	-- STA @509    	 reseta a leitura do key reset
4	: 0100000000000;	-- LDI $0      	 carrega o valor inicial das casas
5	: 0101000111001;	-- STA @57     	 intervalo numérico de configuração
6	: 0101000000000;	-- STA @0      	 armazena 0 na unidade
7	: 0101000000001;	-- STA @1      	 armazena 0 na dezena
8	: 0101000000010;	-- STA @2      	 armazena 0 na centena
9	: 0101000000011;	-- STA @3      	 armazena 0 no milhar
10	: 0101000000100;	-- STA @4      	 armazena 0 na dezena de milhar
11	: 0101000000101;	-- STA @5      	 armazena 0 na centena de milhar
12	: 0101000001000;	-- STA @8      	 armazena um 0 de referência
13	: 0100000000001;	-- LDI $1      	 carrega o valor de incremento
14	: 0101000000110;	-- STA @6      	 armazena o valor de incremento
15	: 0101000001001;	-- STA @9			 armazena 1 no 9 para referência do intervalo numérico de configuração
16	: 0100000001010;	-- LDI $10     	 carrega o valor máximo por casa possível
17	: 0101000000111;	-- STA @7      	 armazena o valor máximo por casa possível
18	: 0100000001001;	-- LDI $9      	 carrega o número 9 para definir o limite de contagem inicial
19	: 0101000111010;	-- STA @58     	 armazena na casa das unidades do limite
20	: 0101000111011;	-- STA @59     	 armazena na casa das dezenas do limite
21	: 0101000111100;	-- STA @60     	 armazena na casa das centenas do limite
22	: 0101000111101;	-- STA @61     	 armazena na casa dos milhares do limite
23	: 0101000111110;	-- STA @62     	 armazena na casa das dezenas de milhar do limite
24	: 0101000111111;	-- STA @63     	 armazena na casa das centenas de milhar do limite
25	: 0100000000010;	-- LDI $2			 carrega 2 para inicializar próximo endereço de referência do intervalo numérico de configuração
26	: 0101000001010;	-- STA @10			 armazena a referência de estado 2 no endereço 10
27	: 0100000000011;	-- LDI $3			 carrega 3 para inicializar próximo endereço de referência do intervalo numérico de configuração
28	: 0101000001011;	-- STA @11			 armazena a referência de estado 3 no endereço 11
29	: 0100000000100;	-- LDI $4			 carrega 4 para inicializar próximo endereço de referência do intervalo numérico de configuração
30	: 0101000001100;	-- STA @12			 armazena a referência de estado 4 no endereço 12
31	: 0001101100100;	-- LDA @356    	 carrega o valor do botão reset
32	: 1011000000110;	-- AND @6      	 aplica a mask
33	: 1000000001000;	-- CEQ @8      	 verifica se é 0
34	: 0111000100101;	-- JEQ .PULA_RESET
35	: 0101111111101;	-- STA @509
36	: 1001001001111;	-- JSR .RESET
37	: 0001101100001;	-- LDA @353    	 carrega o valor do botão 1
38	: 1011000000110;	-- AND @6      	 aplica a mask
39	: 1000000001000;	-- CEQ @8      	 verifica se é 0
40	: 0111000101011;	-- JEQ .PULA_CONFIG
41	: 0101111111110;	-- STA @510
42	: 0110000110111;	-- JMP .INICIO_LOOP_CONFIGURACAO_LIMITE
43	: 0001101100000;	-- LDA @352    	 carrega o valor do botão 0
44	: 1011000000110;	-- AND @6      	 aplica a mask
45	: 1000000001000;	-- CEQ @8      	 verifica se é 0
46	: 0111000110100;	-- JEQ .PULA_INCREMENTA_CONTAGEM
47	: 0101111111111;	-- STA @511
48	: 1001100111101;	-- JSR .ATINGIU_LIMITE			 verifica se a contagem atingiu o limite
49	: 1000000000110;	-- CEQ @6						 se atingiu o limite, pula o incrementa contagem
50	: 0111000110100;	-- JEQ .PULA_INCREMENTA_CONTAGEM
51	: 1001001010111;	-- JSR .INCREMENTA_CONTAGEM
52	: 1001011101111;	-- JSR .APAGA_LEDS         	 apaga os LEDs
53	: 1001010001000;	-- JSR .MOSTRA_CONTAGEM    	 escreve os números da contagem nos displays
54	: 0110000011111;	-- JMP .LOOP_PRINCIPAL
55	: 0100000000011;	-- LDI $3			 acende os leds da primeira posição
56	: 0101100000000;	-- STA @256
57	: 1001001001111;	-- JSR .RESET		 reseta a contagem
58	: 0001101100100;	-- LDA @356    	 carrega o valor do botão reset
59	: 1011000000110;	-- AND @6      	 aplica a mask
60	: 1000000000110;	-- CEQ @6      	 verifica se é 1
61	: 0111001001100;	-- JEQ .SAIR_LOOP_CONFIGURACAO_LIMITE
62	: 0001101100001;	-- LDA @353    	 carrega o valor do botão 1
63	: 1011000000110;	-- AND @6      	 aplica a mask
64	: 1000000001000;	-- CEQ @8      	 verifica se é 0
65	: 0111001000100;	-- JEQ .PULA_MUDANCA_ESTADO
66	: 0101111111110;	-- STA @510
67	: 0110001001100;	-- JMP .SAIR_LOOP_CONFIGURACAO_LIMITE
68	: 0001101100000;	-- LDA @352    	 carrega o valor do botão 0
69	: 1011000000110;	-- AND @6      	 aplica a mask
70	: 1000000001000;	-- CEQ @8      	 verifica se é 0
71	: 0111001001010;	-- JEQ .PULA_MUDANCA_INTERVALO
72	: 0101111111111;	-- STA @511
73	: 1001011110100;	-- JSR .MUDA_INTERVALO
74	: 1001010010101;	-- JSR .MOSTRA_LIMITE
75	: 0110000111010;	-- JMP .LOOP_CONFIGURACAO_LIMITE
76	: 0100000000000;	-- LDI $0    		 carrega 0
77	: 0101000111001;	-- STA @57     	 armazena 0 no intervalo de mudança atual
78	: 0110000011111;	-- JMP .LOOP_PRINCIPAL
79	: 0100000000000;	-- LDI $0
80	: 0101000000000;	-- STA @0
81	: 0101000000001;	-- STA @1
82	: 0101000000010;	-- STA @2
83	: 0101000000011;	-- STA @3
84	: 0101000000100;	-- STA @4
85	: 0101000000101;	-- STA @5
86	: 1010000000000;	-- RET
87	: 0001000000000;	-- LDA @0                  	 carrega o valor da unidade
88	: 0010000000110;	-- ADD @6                  	 incrementa o valor da unidade
89	: 1000000000111;	-- CEQ @7                  	 compara o valor da casa com 10
90	: 0111001011101;	-- JEQ .INCREMENTA_DEZENA  	 incrementa a casa da dezena caso necessário
91	: 0101000000000;	-- STA @0                  	 armazena o valor da unidade
92	: 1010000000000;	-- RET
93	: 0100000000000;	-- LDI $0                  	 carrega 0
94	: 0101000000000;	-- STA @0                  	 armazena 0 na unidade
95	: 0001000000001;	-- LDA @1                  	 carrega o valor atual da dezena
96	: 0010000000110;	-- ADD @6                  	 incrementa o valor da dezena
97	: 1000000000111;	-- CEQ @7                  	 verifica se é igual a 10
98	: 0111001100101;	-- JEQ .INCREMENTA_CENTENA 	 se for, incrementa a centena
99	: 0101000000001;	-- STA @1                  	 armazena o novo valor da dezena
100	: 0110001011100;	-- JMP .FIM_INCREMENTA     	 sai da função
101	: 0100000000000;	-- LDI $0                  	 carrega 0
102	: 0101000000001;	-- STA @1                  	 armazena 0 na dezena
103	: 0001000000010;	-- LDA @2                  	 carrega o valor atual da centena
104	: 0010000000110;	-- ADD @6                  	 incrementa o valor da centena
105	: 1000000000111;	-- CEQ @7                  	 verifica se é igual a 10
106	: 0111001101101;	-- JEQ .INCREMENTA_MILHAR  	 se for, incrementa o milhar
107	: 0101000000010;	-- STA @2                  	 armazena o novo valor da centena
108	: 0110001011100;	-- JMP .FIM_INCREMENTA     	 sai da função
109	: 0100000000000;	-- LDI $0                  	 carrega 0
110	: 0101000000010;	-- STA @2                  	 armazena 0 na centena
111	: 0001000000011;	-- LDA @3                  	 carrega o valor atual do milhar
112	: 0010000000110;	-- ADD @6                  	 incrementa o valor do milhar
113	: 1000000000111;	-- CEQ @7                  	 verifica se é igual a 10
114	: 0111001110101;	-- JEQ .INCREMENTA_DMILHAR 	 se for, incrementa a dezena de milhar
115	: 0101000000011;	-- STA @3                  	 armazena o novo valor do milhar
116	: 0110001011100;	-- JMP .FIM_INCREMENTA     	 sai da função
117	: 0100000000000;	-- LDI $0                  	 carrega 0
118	: 0101000000011;	-- STA @3                  	 armazena 0 no milhar
119	: 0001000000100;	-- LDA @4                  	 carrega o valor atual da dezena de milhar
120	: 0010000000110;	-- ADD @6                  	 incrementa o valor da dezena de milhar
121	: 1000000000111;	-- CEQ @7                  	 verifica se é igual a 10
122	: 0111001111101;	-- JEQ .INCREMENTA_CMILHAR 	 se for, incrementa a centena de milhar
123	: 0101000000100;	-- STA @4                  	 armazena o novo valor da dezena de milhar
124	: 0110001011100;	-- JMP .FIM_INCREMENTA     	 sai da função
125	: 0100000000000;	-- LDI $0                  	 carrega 0
126	: 0101000000100;	-- STA @4                  	 armazena 0 na dezena de milhar
127	: 0001000000101;	-- LDA @5                  	 carrega o valor atual da centena de milhar
128	: 0010000000110;	-- ADD @6                  	 incrementa o valor da centena de milhar
129	: 1000000000111;	-- CEQ @7                  	 verifica se é igual a 10
130	: 0111010000101;	-- JEQ .INCREMENTA_MILHAO  	 se for, zera tudo
131	: 0101000000101;	-- STA @5                  	 armazena o novo valor da centena de milhar
132	: 0110001011100;	-- JMP .FIM_INCREMENTA     	 sai da função
133	: 0100000000000;	-- LDI $0  	 carrega 0
134	: 0101000000101;	-- STA $5  	 armazena 0 na centena de milhar
135	: 0110001011100;	-- JMP .FIM_INCREMENTA
136	: 0001000000000;	-- LDA @0      	 carrega o valor da unidade
137	: 0101100100000;	-- STA @288    	 armazena no HEX 0
138	: 0001000000001;	-- LDA @1      	 carrega o valor da dezena
139	: 0101100100001;	-- STA @289    	 armazena no HEX 1
140	: 0001000000010;	-- LDA @2      	 carrega o valor da centena
141	: 0101100100010;	-- STA @290    	 armazena no HEX 2
142	: 0001000000011;	-- LDA @3      	 carrega o valor do milhar
143	: 0101100100011;	-- STA @291    	 armazena no HEX 3
144	: 0001000000100;	-- LDA @4      	 carrega o valor da dezena de milhar
145	: 0101100100100;	-- STA @292    	 armazena no HEX 4
146	: 0001000000101;	-- LDA @5      	 carrega o valor da centena de milhar
147	: 0101100100101;	-- STA @293    	 armazena no HEX 5
148	: 1010000000000;	-- RET
149	: 0001000111001;	-- LDA @57                 	 carrega o intervalo atual
150	: 1000000001000;	-- CEQ @8                  	 verifica se é igual a 0
151	: 0111010100001;	-- JEQ .DIGITO_0_ML     	 se for
152	: 1000000001001;	-- CEQ @9                  	 verifica se é igual a 1
153	: 0111010101110;	-- JEQ .DIGITO_1_ML     	 se for
154	: 1000000001010;	-- CEQ @10                 	 verifica se é igual a 2
155	: 0111010111011;	-- JEQ .DIGITO_2_ML     	 se for
156	: 1000000001011;	-- CEQ @11                 	 verifica se é igual a 3
157	: 0111011001000;	-- JEQ .DIGITO_3_ML     	 se for
158	: 1000000001100;	-- CEQ @12                 	 verifica se é igual a 4
159	: 0111011010101;	-- JEQ .DIGITO_4_ML     	 se for
160	: 0110011100010;	-- JMP .DIGITO_5_ML 		 se não for nenhum dos acima
161	: 0001101000000;	-- LDA @320    	 carrega o valor das chaves
162	: 0101100100000;	-- STA @288    	 armazena no HEX 0
163	: 0001000111011;	-- LDA @59			 carrega o valor da dezena do limite
164	: 0101100100001;	-- STA @289    	 armazena no HEX 1
165	: 0001000111100;	-- LDA @60			 carrega o valor de centena do limite
166	: 0101100100010;	-- STA @290    	 armazena no HEX 2
167	: 0001000111101;	-- LDA @61     	 carrega o valor do milhar do limite
168	: 0101100100011;	-- STA @291    	 armazena no HEX 3
169	: 0001000111110;	-- LDA @62     	 carrega o valor da dezena de milhar do limite
170	: 0101100100100;	-- STA @292    	 armazena no HEX 4
171	: 0001000111111;	-- LDA @63     	 carrega o valor da centena de milhar do limite
172	: 0101100100101;	-- STA @293    	 armazena no HEX 5
173	: 1010000000000;	-- RET
174	: 0001000111010;	-- LDA @58     	 carrega o valor da unidade do limite
175	: 0101100100000;	-- STA @288    	 armazena no HEX 0
176	: 0001101000000;	-- LDA @320    	 carrega o valor das chaves
177	: 0101100100001;	-- STA @289    	 armazena no HEX 1
178	: 0001000111100;	-- LDA @60     	 carrega o valor da centena do limite
179	: 0101100100010;	-- STA @290    	 armazena no HEX 2
180	: 0001000111101;	-- LDA @61     	 carrega o valor do milhar do limite
181	: 0101100100011;	-- STA @291    	 armazena no HEX 3
182	: 0001000111110;	-- LDA @62     	 carrega o valor da dezena de milhar do limite
183	: 0101100100100;	-- STA @292    	 armazena no HEX 4
184	: 0001000111111;	-- LDA @63     	 carrega o valor da centena de milhar do limite
185	: 0101100100101;	-- STA @293    	 armazena no HEX 5
186	: 1010000000000;	-- RET
187	: 0001000111010;	-- LDA @58     	 carrega o valor da unidade do limite
188	: 0101100100000;	-- STA @288    	 armazena no HEX 0
189	: 0001000111011;	-- LDA @59			 carrega o valor da dezena do limite
190	: 0101100100001;	-- STA @289    	 armazena no HEX 1
191	: 0001101000000;	-- LDA @320    	 carrega o valor das chaves
192	: 0101100100010;	-- STA @290    	 armazena no HEX 2
193	: 0001000111101;	-- LDA @61     	 carrega o valor do milhar do limite
194	: 0101100100011;	-- STA @291    	 armazena no HEX 3
195	: 0001000111110;	-- LDA @62     	 carrega o valor da dezena de milhar do limite
196	: 0101100100100;	-- STA @292    	 armazena no HEX 4
197	: 0001000111111;	-- LDA @63     	 carrega o valor da centena de milhar do limite
198	: 0101100100101;	-- STA @293    	 armazena no HEX 5
199	: 1010000000000;	-- RET
200	: 0001000111010;	-- LDA @58     	 carrega o valor da unidade do limite
201	: 0101100100000;	-- STA @288    	 armazena no HEX 0
202	: 0001000111011;	-- LDA @59			 carrega o valor da dezena do limite
203	: 0101100100001;	-- STA @289    	 armazena no HEX 1
204	: 0001000111100;	-- LDA @60    		 carrega o valor da centena do limite
205	: 0101100100010;	-- STA @290    	 armazena no HEX 2
206	: 0001101000000;	-- LDA @320    	 carrega o valor das chaves
207	: 0101100100011;	-- STA @291    	 armazena no HEX 3
208	: 0001000111110;	-- LDA @62     	 carrega o valor da dezena de milhar do limite
209	: 0101100100100;	-- STA @292    	 armazena no HEX 4
210	: 0001000111111;	-- LDA @63     	 carrega o valor da centena de milhar do limite
211	: 0101100100101;	-- STA @293    	 armazena no HEX 5
212	: 1010000000000;	-- RET
213	: 0001000111010;	-- LDA @58     	 carrega o valor da unidade do limite
214	: 0101100100000;	-- STA @288    	 armazena no HEX 0
215	: 0001000111011;	-- LDA @59			 carrega o valor da dezena do limite
216	: 0101100100001;	-- STA @289    	 armazena no HEX 1
217	: 0001000111100;	-- LDA @60    		 carrega o valor da centena do limite
218	: 0101100100010;	-- STA @290    	 armazena no HEX 2
219	: 0001000111101;	-- LDA @61     	 carrega o valor do milhar do limite
220	: 0101100100011;	-- STA @291    	 armazena no HEX 3
221	: 0001101000000;	-- LDA @320    	 carrega o valor das chaves
222	: 0101100100100;	-- STA @292    	 armazena no HEX 4
223	: 0001000111111;	-- LDA @63     	 carrega o valor da centena de milhar do limite
224	: 0101100100101;	-- STA @293    	 armazena no HEX 5
225	: 1010000000000;	-- RET
226	: 0001000111010;	-- LDA @58     	 carrega o valor da unidade do limite
227	: 0101100100000;	-- STA @288    	 armazena no HEX 0
228	: 0001000111011;	-- LDA @59			 carrega o valor da dezena do limite
229	: 0101100100001;	-- STA @289    	 armazena no HEX 1
230	: 0001000111100;	-- LDA @60    		 carrega o valor da centena do limite
231	: 0101100100010;	-- STA @290    	 armazena no HEX 2
232	: 0001000111101;	-- LDA @61     	 carrega o valor do milhar do limite
233	: 0101100100011;	-- STA @291    	 armazena no HEX 3
234	: 0001000111110;	-- LDA @62     	 carrega o valor da dezena de milhar do limite
235	: 0101100100100;	-- STA @292    	 armazena no HEX 4
236	: 0001101000000;	-- LDA @320     	 carrega o valor das chaves
237	: 0101100100101;	-- STA @293    	 armazena no HEX 5
238	: 1010000000000;	-- RET
239	: 0100000000000;	-- LDI $0
240	: 0101100000000;	-- STA @256
241	: 0101100000001;	-- STA @257
242	: 0101100000010;	-- STA @258
243	: 1010000000000;	-- RET
244	: 0001000111001;	-- LDA @57                 	 carrega o intervalo atual
245	: 1000000001000;	-- CEQ @8                  	 verifica se é igual a 0
246	: 0111100000000;	-- JEQ .DIGITO_0_MI     		 se for
247	: 1000000001001;	-- CEQ @9                  	 verifica se é igual a 1
248	: 0111100001010;	-- JEQ .DIGITO_1_MI     		 se for
249	: 1000000001010;	-- CEQ @10                 	 verifica se é igual a 2
250	: 0111100010100;	-- JEQ .DIGITO_2_MI     		 se for
251	: 1000000001011;	-- CEQ @11                 	 verifica se é igual a 3
252	: 0111100011110;	-- JEQ .DIGITO_3_MI     		 se for
253	: 1000000001100;	-- CEQ @12                 	 verifica se é igual a 4
254	: 0111100101001;	-- JEQ .DIGITO_4_MI     		 se for
255	: 0110100110011;	-- JMP .DIGITO_5_MI 			 se não for nenhum dos acima
256	: 0100000000001;	-- LDI $1			 atualiza o intervalo
257	: 0101000111001;	-- STA @57
258	: 0100000000110;	-- LDI $6			 acende os LEDs da segunda posição e apaga o resto
259	: 0101100000000;	-- STA @256
260	: 0100000000000;	-- LDI $0
261	: 0101100000001;	-- STA @257
262	: 0101100000010;	-- STA @258
263	: 0001101000000;	-- LDA @320		 salva o novo valor do dígito
264	: 0101000111010;	-- STA @58
265	: 1010000000000;	-- RET
266	: 0100000000010;	-- LDI $2			 atualiza o intervalo
267	: 0101000111001;	-- STA @57
268	: 0100000011000;	-- LDI $24			 acende os LEDs da terceira posição e apaga o resto
269	: 0101100000000;	-- STA @256
270	: 0100000000000;	-- LDI $0
271	: 0101100000001;	-- STA @257
272	: 0101100000010;	-- STA @258
273	: 0001101000000;	-- LDA @320		 salva o novo valor do dígito
274	: 0101000111011;	-- STA @59
275	: 1010000000000;	-- RET
276	: 0100000000011;	-- LDI $3			 atualiza o intervalo
277	: 0101000111001;	-- STA @57
278	: 0100001100000;	-- LDI $96			 acende os LEDs da quarta posição e apaga o resto
279	: 0101100000000;	-- STA @256
280	: 0100000000000;	-- LDI $0
281	: 0101100000001;	-- STA @257
282	: 0101100000010;	-- STA @258
283	: 0001101000000;	-- LDA @320		 salva o novo valor do dígito
284	: 0101000111100;	-- STA @60
285	: 1010000000000;	-- RET
286	: 0100000000100;	-- LDI $4			 atualiza o intervalo
287	: 0101000111001;	-- STA @57
288	: 0100010000000;	-- LDI $128		 acende os LEDs da quinta posição e apaga o resto
289	: 0101100000000;	-- STA @256
290	: 0100000000001;	-- LDI $1
291	: 0101100000001;	-- STA @257
292	: 0100000000000;	-- LDI $0
293	: 0101100000010;	-- STA @258
294	: 0001101000000;	-- LDA @320		 salva o novo valor do dígito
295	: 0101000111101;	-- STA @61
296	: 1010000000000;	-- RET
297	: 0100000000101;	-- LDI $5			 atualiza o intervalo
298	: 0101000111001;	-- STA @57
299	: 0100000000000;	-- LDI $0			 acende os LEDs da sexta posição e apaga o resto
300	: 0101100000000;	-- STA @256
301	: 0100000000001;	-- LDI $1
302	: 0101100000001;	-- STA @257
303	: 0101100000010;	-- STA @258
304	: 0001101000000;	-- LDA @320		 salva o novo valor do dígito
305	: 0101000111110;	-- STA @62
306	: 1010000000000;	-- RET
307	: 0100000000000;	-- LDI $0			 atualiza o intervalo
308	: 0101000111001;	-- STA @57
309	: 0100000000011;	-- LDI $3			 acende os LEDs da primeira posição e apaga o resto
310	: 0101100000000;	-- STA @256
311	: 0100000000000;	-- LDI $0
312	: 0101100000001;	-- STA @257
313	: 0101100000010;	-- STA @258
314	: 0001101000000;	-- LDA @320		 salva o novo valor do dígito
315	: 0101000111111;	-- STA @63
316	: 1010000000000;	-- RET
317	: 0001000000101;	-- LDA @5			 carrega o valor da centena de milhar
318	: 1000000111111;	-- CEQ @63			 compara com o valor limite da centena de milhar
319	: 0111101000010;	-- JEQ .CMILHAR_ATINGIU
320	: 0100000000000;	-- LDI $0			 se não for igual, não atingiu
321	: 1010000000000;	-- RET
322	: 0001000000100;	-- LDA @4			 carrega o valor da dezena de milhar
323	: 1000000111110;	-- CEQ @62			 compara com o valor limite da dezena de milhar
324	: 0111101000111;	-- JEQ .DMILHAR_ATINGIU
325	: 0100000000000;	-- LDI $0			 se não for igual, não atingiu
326	: 1010000000000;	-- RET
327	: 0001000000011;	-- LDA @3			 carrega o valor do milhar
328	: 1000000111101;	-- CEQ @61			 compara com o valor limite do milhar
329	: 0111101001100;	-- JEQ .MILHAR_ATINGIU
330	: 0100000000000;	-- LDI $0			 se não for igual, não atingiu
331	: 1010000000000;	-- RET
332	: 0001000000010;	-- LDA @2			 carrega o valor da centena
333	: 1000000111100;	-- CEQ @60			 compara com o valor limite da centena
334	: 0111101010001;	-- JEQ .CENTENA_ATINGIU
335	: 0100000000000;	-- LDI $0			 se não for igual, não atingiu
336	: 1010000000000;	-- RET
337	: 0001000000001;	-- LDA @1			 carrega o valor da dezena
338	: 1000000111011;	-- CEQ @59			 compara com o valor limite da dezena
339	: 0111101010110;	-- JEQ .DEZENA_ATINGIU
340	: 0100000000000;	-- LDI $0			 se não for igual, não atingiu
341	: 1010000000000;	-- RET
342	: 0001000000000;	-- LDA @0			 carrega o valor da unidade
343	: 1000000111010;	-- CEQ @58			 compara com o valor limite da unidade
344	: 0111101011011;	-- JEQ .UNIDADE_ATINGIU
345	: 0100000000000;	-- LDI $0			 se não for igual, não atingiu
346	: 1010000000000;	-- RET
347	: 0100000000001;	-- LDI $1
348	: 1010000000000;	-- RET
[349..511]	:	0000000000000;
END;